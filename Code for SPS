#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>

// Replace with your network credentials
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";

// Server details
const char* serverName = "your_server_address";
const int serverPort = 80;

ESP8266WebServer server(80);

// Pin configuration
const int sensorPin = 2;  // Pin connected to the occupancy sensor

// Variables
int occupancyStatus = 0;  // 0 = vacant, 1 = occupied

void setup() {
  pinMode(sensorPin, INPUT);

  // Connect to Wi-Fi network
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");

  // Start server
  server.on("/", handleRoot);
  server.on("/update", handleUpdate);
  server.begin();
  Serial.println("Server started");
}

void loop() {
  server.handleClient();

  // Check occupancy status
  int currentStatus = digitalRead(sensorPin);

  if (currentStatus != occupancyStatus) {
    occupancyStatus = currentStatus;
    sendUpdate(occupancyStatus);
  }
}

void handleRoot() {
  server.send(200, "text/plain", "Car Parking Management System");
}

void handleUpdate() {
  if (server.hasArg("status")) {
    occupancyStatus = server.arg("status").toInt();
    sendUpdate(occupancyStatus);
    server.send(200, "text/plain", "Update received");
  } else {
    server.send(400, "text/plain", "Bad Request");
  }
}

void sendUpdate(int status) {
  WiFiClient client;
  if (client.connect(serverName, serverPort)) {
    String url = "/update?status=" + String(status);
    client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                 "Host: " + serverName + "\r\n" +
                 "Connection: close\r\n\r\n");

    while (client.connected()) {
      if (client.available()) {
        String line = client.readStringUntil('\r');
        Serial.print(line);
      }
    }
    client.stop();
  } else {
    Serial.println("Error connecting to server");
  }
}
